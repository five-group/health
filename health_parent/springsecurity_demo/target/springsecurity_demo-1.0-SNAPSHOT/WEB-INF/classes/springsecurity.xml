<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://code.alibabatech.com/schema/dubbo
                            http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/security
                            http://www.springframework.org/schema/security/spring-security.xsd">

    <!--包扫描-->
    <context:component-scan base-package="com.itheima"/>

    <!--问题一：匿名访问配置
    security="none":匿名访问
    -->
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/fonts/**"/>
    <security:http security="none" pattern="/img/**"/>
    <!--登录必须可以匿名访问-->
    <security:http security="none" pattern="/login.html"/>

    <!--自动配置
    use-expressions：
        是否使用表达式false:不使用("ROLE_ADMIN") true:使用(hasRole('ROLE_ADMIN')
        auto-config="true"：自动配置，没有登录页面，后台自动生成登录页面（过滤器）
    -->
    <security:http use-expressions="true" auto-config="true">
        <!--拦截规则配置
        access:如果需要访问/**文件，需要有ROLE_ADMIN权限
        /**:所有路径包含子目录
        拦截规则是由顺序
        如果先被一个拦截url满足要求，后续拦截都不会被执行了。
        -->
        <!--<security:intercept-url access="hasRole('ROLE_ADMIN')" pattern="/**"/>-->
        <!--<security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        &lt;!&ndash;拥有add权限就可以访问b.html页面&ndash;&gt;
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        &lt;!&ndash;拥有ROLE_ADMIN角色就可以访问c.html页面&ndash;&gt;
        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />

        &lt;!&ndash;拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_&ndash;&gt;
        <security:intercept-url pattern="/d.html"  access="hasRole('ADMIN')" />-->

        <security:intercept-url access="hasRole('ROLE_ADMIN')" pattern="/**"/>

        <!--自定义登录页面
        login-page：登录页面
        login-processing-url:登录请求
        username-parameter：用户名
        password-parameter:密码
        authentication-failure-url:登录失败页面
        default-target-url：总是往这个地址跳转index.html

        登录默认请求：/login  登出：/logout
        -->
        <security:form-login login-page="/login.html" login-processing-url="/login.do" username-parameter="username2"
                             password-parameter="password" authentication-failure-url="/login.html"
                             always-use-default-target="true" default-target-url="/index.html"/>

        <!--403 - Forbidden：权限不足  禁用csrf攻击-->
        <security:csrf disabled="true" />

        <!--配置登出请求
        logout-success-url:登出成功页面
        logout-url:登出请求地址
        invalidate-session：登出后销毁session
        -->
        <security:logout logout-success-url="/login.html" logout-url="/logout.do" invalidate-session="true"/>

    </security:http>

    <!--authenticationManager认证管理器配置-->
    <!--<security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                &lt;!&ndash;官方提供固定配置 为了方便入门案例
                name:账号 password：密码{noop}:没有使用加密 authorities：权限   &ndash;&gt;
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}123456"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->


    <!--注册MySpringSecurtiyService-->
    <bean id="mySpringSecurtiyService" class="com.itheima.service.MySpringSecurtiyService"/>

    <!--认证管理器 -配置为自定义认证授权类-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="mySpringSecurtiyService">
            <!--使用bcryt加密方式-->
            <security:password-encoder ref="bCryptPasswordEncoder"/>
         </security:authentication-provider>
    </security:authentication-manager>

    <!--配置bcryt-->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />
</beans>